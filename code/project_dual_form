// PROJECT : MIXED FORM

// parameters
func f1 = 100;
func f2 = 0;
real mu = 8e5;
real lambda = 1e17;


// borders
real radius = 4;

border down(t = -15,15){x = t; y = -15; label=1;};
border right(t = -15,15){x = 15; y = t; label=2;};
border up(t=15,-15){x = t;y = 15; label=3;};
border left(t=15,-15){x = -15; y = t; label=4;};
border hole(t = 0,2*pi){x = radius*cos(t); y = radius*sin(t); label=99;};

// sufficiently refined mesh
// buildmesh

mesh Thr = buildmesh(down(2^(6)) + right(2^(6)) + up(2^(6)) + left(2^(6)) + hole(-2^(6)));

// fespace 
fespace Vhr(Thr,[P2,P2]);
fespace Qhr(Thr,P1);

Vhr [u1r,u2r];
Vhr [v1r,v2r];
Qhr pr,qr;

// problem
solve lame([u1r,u2r,pr],[v1r,v2r,qr]) = int2d(Thr)(-pr*(dx(v1r) + dy(v2r)) + qr*(dx(u1r) + dy(u2r)) + 1/lambda*pr*qr
 +2.*mu*(dx(u1r)*dx(v1r) + dy(u2r)*dy(v2r) + 0.5*(dy(u1r)+dx(u2r))*(dy(v1r)+ dx(v2r)))) - int1d(Thr,2)(f1*v1r + f2*v2r) + on(4,u1r=0,u2r=0);

//plot(Thr, [u1r, u2r], value=true, wait=true);

// iterations

int I = 4;
real[int] hvect(I);
real[int] errQ1(I);
real[int] errQ2(I);
real[int] errH1(I);
real[int] errL2(I);
real[int] errP(I);

for(int i = 0; i < I; ++i){

// buildmesh

mesh Th = buildmesh(down(2^(i+2)) + right(2^(i+2)) + up(2^(i+2)) + left(2^(i+2)) + hole(-2^(i+2)));
// fespace

fespace Vh(Th,[P2,P2]);
fespace Qh(Th,P1);

Vh [u1,u2];
Vh [v1,v2];
Qh p,q;

// h //-----------------------------------------
fespace Mh(Th,P0);
Mh h = hTriangle;
hvect[i]=h[].max;

// problem
solve lame([u1,u2,p],[v1,v2,q]) = int2d(Th)(-p*(dx(v1) + dy(v2)) + q*(dx(u1) + dy(u2)) + 1/lambda*p*q + 2.*mu*(dx(u1)*dx(v1) + dy(u2)*dy(v2) + 0.5*(dy(u1)+dx(u2))*(dy(v1)+ dx(v2)))) - int1d(Th,2)(f1*v1 + f2*v2) + on(4,u1=0,u2=0);

// errors : what exactly ? CHECK NORMS

errP(i) = int2d(Th)((p - pr)^2);
errP(i) = sqrt(errP(i));
cout << "Error p at iteration : "<< i << "\t" << errP[i] << endl;

errL2(i) = int2d(Th)((u1 - u1r)^2 + (u2 - u2r)^2);
errL2(i) = sqrt(errL2(i));
cout << "Error L2 at iteration : "<< i << "\t" << errL2[i] << endl;

errH1(i) = int2d(Th)((dx(u1) - dx(u1r))^2 + (dy(u1) - dy(u1r))^2 + (dx(u2) - dx(u2r))^2 + (dy(u2) - dy(u2r))^2); // SEMINORM !!
errH1(i) = sqrt(errH1(i));
cout << "Error H1 at iteration : "<< i << "\t" << errH1[i] << endl;


errQ1[i] = 1/30.*int1d(Th,2)(u1 - u1r);
errQ1[i] = abs(errQ1[i]);
cout << "Error Q1 at iteration: "<< i << "\t" << errQ1[i] << endl;

errQ2[i] = sqrt((u1(0,4) - u1r(0,4))^2 + (u2(0,4) - u2r(0,4))^2);
cout << "Error Q2 at iteration: "<< i << "\t" << errQ2[i] << endl;


}

cout << "Saving data: " << endl; 
ofstream fileh("h_vect_m.dat"); 
fileh << hvect << endl;

ofstream fileErrorP("errorP_m.dat");
fileErrorP << errP << endl;

ofstream fileErrorL2("errorL2_m.dat");
fileErrorL2 << errL2 << endl;

ofstream fileErrorH1("errorH1_m.dat");
fileErrorH1 << errH1 << endl;

ofstream fileErrorQ1("errorQ1_m.dat");
fileErrorQ1 << errQ1 << endl;

ofstream fileErrorQ2("errorQ2_m.dat");
fileErrorQ2 << errQ2 << endl;